-- AlterTable
ALTER TABLE "CocktailRecipeIngredient"
    ADD COLUMN "unitId" TEXT;

-- CreateTable
CREATE TABLE "Unit"
(
    "id"          TEXT NOT NULL,
    "name"        TEXT NOT NULL,
    "workspaceId" TEXT NOT NULL,

    CONSTRAINT "Unit_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "UnitConversion"
(
    "id"            TEXT             NOT NULL,
    "fromUnitId"    TEXT             NOT NULL,
    "toUnitId"      TEXT             NOT NULL,
    "factor"        DOUBLE PRECISION NOT NULL,
    "autoGenerated" BOOLEAN          NOT NULL DEFAULT false,
    "workspaceId"   TEXT             NOT NULL,

    CONSTRAINT "UnitConversion_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "IngredientVolume"
(
    "id"           TEXT             NOT NULL,
    "volume"       DOUBLE PRECISION NOT NULL,
    "ingredientId" TEXT             NOT NULL,
    "unitId"       TEXT             NOT NULL,
    "workspaceId"  TEXT             NOT NULL,

    CONSTRAINT "IngredientVolume_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Unit_name_workspaceId_key" ON "Unit" ("name", "workspaceId");

-- CreateIndex
CREATE UNIQUE INDEX "UnitConversion_toUnitId_fromUnitId_workspaceId_key" ON "UnitConversion" ("toUnitId", "fromUnitId", "workspaceId");

-- CreateIndex
CREATE UNIQUE INDEX "IngredientVolume_ingredientId_workspaceId_unitId_key" ON "IngredientVolume" ("ingredientId", "workspaceId", "unitId");

-- AddForeignKey
ALTER TABLE "CocktailRecipeIngredient"
    ADD CONSTRAINT "CocktailRecipeIngredient_unitId_fkey" FOREIGN KEY ("unitId") REFERENCES "Unit" ("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Unit"
    ADD CONSTRAINT "Unit_workspaceId_fkey" FOREIGN KEY ("workspaceId") REFERENCES "Workspace" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "UnitConversion"
    ADD CONSTRAINT "UnitConversion_fromUnitId_fkey" FOREIGN KEY ("fromUnitId") REFERENCES "Unit" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "UnitConversion"
    ADD CONSTRAINT "UnitConversion_toUnitId_fkey" FOREIGN KEY ("toUnitId") REFERENCES "Unit" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "UnitConversion"
    ADD CONSTRAINT "UnitConversion_workspaceId_fkey" FOREIGN KEY ("workspaceId") REFERENCES "Workspace" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "IngredientVolume"
    ADD CONSTRAINT "IngredientVolume_ingredientId_fkey" FOREIGN KEY ("ingredientId") REFERENCES "Ingredient" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "IngredientVolume"
    ADD CONSTRAINT "IngredientVolume_unitId_fkey" FOREIGN KEY ("unitId") REFERENCES "Unit" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "IngredientVolume"
    ADD CONSTRAINT "IngredientVolume_workspaceId_fkey" FOREIGN KEY ("workspaceId") REFERENCES "Workspace" ("id") ON DELETE CASCADE ON UPDATE CASCADE;

CREATE OR REPLACE FUNCTION convertUnit(inputData text) RETURNS text AS
$$
BEGIN
    CASE
        WHEN inputData = 'cl' THEN RETURN 'CL';
        WHEN inputData = 'Dash' THEN RETURN 'DASH';
        WHEN inputData = 'Stück' THEN RETURN 'PIECE';
        WHEN inputData = 'Pip. cm' THEN RETURN 'DROPPER_CM';
        WHEN inputData = 'Pip. Tropfen' THEN RETURN 'DROPPER_DROPS';
        WHEN inputData = 'Pin. cm' THEN RETURN 'DROPPER_CM';
        WHEN inputData = 'Pin. Tropfen' THEN RETURN 'DROPPER_DROPS';
        WHEN inputData = 'Sprühen' THEN RETURN 'SPRAY';
        WHEN inputData = 'g' THEN RETURN 'GRAMM';
        ELSE RETURN inputData; -- If the unit is not recognized
        END CASE;
END
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION convertUnitLiteralsToIdentifier_CocktailIngredient()
    RETURNS VOID
AS
$$
DECLARE
    t_curs cursor for
        select *
        from "CocktailRecipeIngredient";
BEGIN
    FOR t_row in t_curs
        LOOP
            update "CocktailRecipeIngredient"
            set unit = convertUnit(unit)
            where current of t_curs;
        END LOOP;
END;
$$
    LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION convertUnitLiteralsToIdentifier_Ingredient()
    RETURNS VOID
AS
$$
DECLARE
    t_curs cursor for
        select *
        from "Ingredient";
BEGIN
    FOR t_row in t_curs
        LOOP
            update "Ingredient"
            set unit = convertUnit(unit)
            where current of t_curs;
        END LOOP;
END;
$$
    LANGUAGE plpgsql;

SELECT convertUnitLiteralsToIdentifier_Ingredient();
SELECT convertUnitLiteralsToIdentifier_CocktailIngredient();


CREATE OR REPLACE FUNCTION createUnitsAndLink()
    RETURNS VOID
AS
$$
DECLARE
    workspace_id                 text;
    unitName                     text;
    ingredient                   "Ingredient"%rowtype;
    cocktailRecipeStepIngredient "CocktailRecipeIngredient"%rowtype;

BEGIN
    -- iterate through every workspace, to don´t mix them up
    FOR workspace_id in SELECT id FROM "Workspace"
        LOOP
            -- select all existing units from a workspace and create an entity
            FOR unitName in (SELECT DISTINCT unit
                             FROM "Ingredient"
                             where "workspaceId" = workspace_id
                             union
                             distinct
                             SELECT DISTINCT unit
                             FROM "CocktailRecipeIngredient" ci
                                      inner join public."CocktailRecipeStep" CRS on CRS.id = ci."cocktailRecipeStepId"
                                      INNER JOIN public."CocktailRecipe" CR on CR.id = CRS."cocktailRecipeId"
                             where CR."workspaceId" = workspace_id)
                LOOP
                    -- create an unit entry for each unit literal
                    INSERT INTO "Unit" (id, name, "workspaceId")
                    SELECT gen_random_uuid(), unitName, workspace_id
                    WHERE NOT EXISTS(SELECT id FROM "Unit" WHERE name = unitName AND workspace_id = "workspaceId");
                END LOOP;

            -- insert all default units

            INSERT INTO "Unit" (id, name, "workspaceId")
            SELECT gen_random_uuid(), 'CL', workspace_id
            WHERE NOT EXISTS(SELECT id FROM "Unit" WHERE name = 'CL' AND workspace_id = "workspaceId");
            INSERT INTO "Unit" (id, name, "workspaceId")
            SELECT gen_random_uuid(), 'DASH', workspace_id
            WHERE NOT EXISTS(SELECT id FROM "Unit" WHERE name = 'DASH' AND workspace_id = "workspaceId");
            INSERT INTO "Unit" (id, name, "workspaceId")
            SELECT gen_random_uuid(), 'PIECE', workspace_id
            WHERE NOT EXISTS(SELECT id FROM "Unit" WHERE name = 'PIECE' AND workspace_id = "workspaceId");
            INSERT INTO "Unit" (id, name, "workspaceId")
            SELECT gen_random_uuid(), 'DROPPER_CM', workspace_id
            WHERE NOT EXISTS(SELECT id FROM "Unit" WHERE name = 'DROPPER_CM' AND workspace_id = "workspaceId");
            INSERT INTO "Unit" (id, name, "workspaceId")
            SELECT gen_random_uuid(), 'DROPPER_DROPS', workspace_id
            WHERE NOT EXISTS(SELECT id FROM "Unit" WHERE name = 'DROPPER_DROPS' AND workspace_id = "workspaceId");
            INSERT INTO "Unit" (id, name, "workspaceId")
            SELECT gen_random_uuid(), 'GRAMM', workspace_id
            WHERE NOT EXISTS(SELECT id FROM "Unit" WHERE name = 'GRAMM' AND workspace_id = "workspaceId");
            INSERT INTO "Unit" (id, name, "workspaceId")
            SELECT gen_random_uuid(), 'SPRAY', workspace_id
            WHERE NOT EXISTS(SELECT id FROM "Unit" WHERE name = 'SPRAY' AND workspace_id = "workspaceId");


            FOR ingredient IN SELECT * FROM "Ingredient" WHERE unit IS NOT NULL AND volume IS NOT NULL
                LOOP
                    -- insert direct link - no conversions made yet
                    INSERT INTO "IngredientVolume" (id, volume, "ingredientId", "unitId", "workspaceId")
                    VALUES (gen_random_uuid(), ingredient.volume, ingredient.id, (SELECT id
                                                                                  FROM "Unit"
                                                                                  where "Unit"."workspaceId" = workspace_id
                                                                                    and "Unit".name = convertUnit(ingredient.unit)),
                            workspace_id);
                END LOOP;

            FOR cocktailRecipeStepIngredient IN SELECT "CocktailRecipeIngredient".*
                                                FROM "CocktailRecipeIngredient"
                                                         INNER JOIN public."Ingredient" I
                                                                    on I.id = "CocktailRecipeIngredient"."ingredientId"
                                                WHERE I."workspaceId" = workspace_id
                                                  AND "CocktailRecipeIngredient".unit IS NOT NULL
                LOOP
                    UPDATE "CocktailRecipeIngredient"
                    SET "unitId" = (SELECT id
                                    FROM "Unit"
                                    WHERE "Unit".name = cocktailRecipeStepIngredient.unit
                                      AND "Unit"."workspaceId" = workspace_id)
                    WHERE "CocktailRecipeIngredient".id = cocktailRecipeStepIngredient.id;

                END LOOP;

        END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT createUnitsAndLink();

-- DROP FUNCTION convertUnit();
-- DROP FUNCTION convertUnitLiteralsToIdentifier_CocktailIngredient();
-- DROP FUNCTION convertUnitLiteralsToIdentifier_Ingredient();
-- DROP FUNCTION createUnitsAndLink();

ALTER TABLE "Ingredient"
    DROP COLUMN unit;
ALTER TABLE "Ingredient"
    DROP COLUMN volume;

ALTER TABLE "CocktailRecipeIngredient"
    DROP COLUMN unit;
