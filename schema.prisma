generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())

  sessionToken String @unique @map("session_token")

  userId String @map("user_id")

  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())

  name String?

  email String? @unique

  emailVerified DateTime?

  image String?

  accounts Account[]

  sessions Session[]

  workspaces            WorkspaceUser[]
  settings              UserSetting[]
  CocktailCalculation   CocktailCalculation[]
  CocktailStatisticItem CocktailStatisticItem[]
}

enum Setting {
  showImage
  showTags
  lessItems
  theme
  showStatisticActions
}

enum WorkspaceSettingKey {
  translations
  usePrices
}

model UserSetting {
  userId String

  setting Setting

  value String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, setting])
}

model WorkspaceSetting {
  workspaceId String

  setting WorkspaceSettingKey

  value String?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([workspaceId, setting])
}

model VerificationToken {
  id Int @id @default(autoincrement())

  identifier String

  token String @unique

  expires DateTime

  @@unique([identifier, token])
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  USER
}

enum MonitorFormat {
  LANDSCAPE
  PORTRAIT
}

model WorkspaceUser {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String // relation scalar field (used in the `@relation` attribute above)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String // relation scalar field (used in the `@relation` attribute above)
  role        Role

  @@id([workspaceId, userId])
}

model Workspace {
  id                                String                              @id @default(cuid())
  name                              String
  description                       String?
  image                             String?
  users                             WorkspaceUser[]
  Glass                             Glass[]
  Garnish                           Garnish[]
  CocktailRecipe                    CocktailRecipe[]
  Ingredient                        Ingredient[]
  CocktailCard                      CocktailCard[]
  CocktailCalculation               CocktailCalculation[]
  Signage                           Signage[]
  WorkspaceCocktailRecipeStepAction WorkspaceCocktailRecipeStepAction[]
  WorkspaceSetting                  WorkspaceSetting[]
  CocktailStatisticItem             CocktailStatisticItem[]
}

model Signage {
  workspace       Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId     String
  format          MonitorFormat
  content         String
  backgroundColor String?

  @@id([workspaceId, format])
}

model Glass {
  id             String           @id @default(cuid())
  name           String
  volume         Float?
  deposit        Float
  CocktailRecipe CocktailRecipe[]

  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  GlassImage  GlassImage[]
}

model GlassImage {
  image   String
  glass   Glass  @relation(fields: [glassId], references: [id], onDelete: Cascade)
  glassId String @id
}

model Garnish {
  id                      String                  @id @default(cuid())
  name                    String
  description             String?
  price                   Float?
  CocktailRecipeGarnishes CocktailRecipeGarnish[]

  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  GarnishImage GarnishImage[]
}

model GarnishImage {
  image     String
  garnish   Garnish @relation(fields: [garnishId], references: [id], onDelete: Cascade)
  garnishId String  @id
}

model CocktailRecipe {
  id                    String                  @id @default(cuid())
  name                  String
  description           String?
  tags                  String[]
  price                 Float?
  glassWithIce          String
  glassId               String?
  glass                 Glass?                  @relation(fields: [glassId], references: [id])
  garnishes             CocktailRecipeGarnish[]
  steps                 CocktailRecipeStep[]
  CocktailCardGroupItem CocktailCardGroupItem[]

  workspace                Workspace                  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId              String
  CocktailCalculationItems CocktailCalculationItems[]
  CocktailRecipeImage      CocktailRecipeImage[]
  CocktailStatisticItem    CocktailStatisticItem[]
}

model CocktailRecipeImage {
  image            String
  cocktailRecipe   CocktailRecipe @relation(fields: [cocktailRecipeId], references: [id], onDelete: Cascade)
  cocktailRecipeId String         @id
}

model CocktailRecipeGarnish {
  cocktailRecipeId String
  cocktailRecipe   CocktailRecipe @relation(fields: [cocktailRecipeId], references: [id], onDelete: Cascade)
  garnishId        String
  garnish          Garnish        @relation(fields: [garnishId], references: [id], onDelete: Cascade)

  description   String?
  garnishNumber Int
  optional      Boolean? @default(false)

  @@id([garnishId, cocktailRecipeId])
}

model WorkspaceCocktailRecipeStepAction {
  id                 String               @id @default(cuid())
  name               String               @unique
  actionGroup        String
  workspaceId        String
  workspace          Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  CocktailRecipeStep CocktailRecipeStep[]

  @@unique([workspaceId, name, actionGroup])
}

model CocktailRecipeStep {
  id         String @id @default(cuid())
  stepNumber Int

  actionId String
  action   WorkspaceCocktailRecipeStepAction @relation(fields: [actionId], references: [id], onDelete: NoAction)

  ingredients CocktailRecipeIngredient[]

  cocktailRecipe   CocktailRecipe @relation(fields: [cocktailRecipeId], references: [id], onDelete: Cascade)
  cocktailRecipeId String
}

model CocktailRecipeIngredient {
  id               String      @id @default(cuid())
  ingredientNumber Int
  amount           Float?
  unit             String?
  ingredientId     String?
  ingredient       Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  cocktailRecipeStep   CocktailRecipeStep @relation(fields: [cocktailRecipeStepId], references: [id], onDelete: Cascade)
  cocktailRecipeStepId String
}

model Ingredient {
  id                       String                     @id @default(cuid())
  name                     String
  shortName                String?
  description              String?
  notes                    String?
  price                    Float?
  volume                   Float?
  unit                     String?
  link                     String?
  tags                     String[]
  CocktailRecipeIngredient CocktailRecipeIngredient[]

  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId     String
  IngredientImage IngredientImage[]
}

model IngredientImage {
  image        String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String     @id
}

model CocktailCard {
  id       String              @id @default(cuid())
  name     String
  date     DateTime?
  groups   CocktailCardGroup[]
  showTime Boolean             @default(false)

  workspace             Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId           String
  CocktailStatisticItem CocktailStatisticItem[]
}

model CocktailCardGroup {
  id             String                  @id @default(cuid())
  groupNumber    Int                     @default(autoincrement())
  name           String
  cocktailCardId String
  groupPrice     Float?
  cocktailCard   CocktailCard            @relation(fields: [cocktailCardId], references: [id], onDelete: Cascade)
  items          CocktailCardGroupItem[]
}

model CocktailCardGroupItem {
  itemNumber          Int               @default(autoincrement())
  cocktailCardGroupId String
  cocktailCardGroup   CocktailCardGroup @relation(fields: [cocktailCardGroupId], references: [id], onDelete: Cascade)
  cocktailId          String
  cocktail            CocktailRecipe    @relation(fields: [cocktailId], references: [id], onDelete: Cascade)
  specialPrice        Float?

  @@id([cocktailCardGroupId, cocktailId])
}

model CocktailCalculation {
  id   String @id @default(cuid())
  name String

  showSalesStuff Boolean @default(true)

  workspaceId              String
  workspace                Workspace                  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  updatedByUserId          String
  updatedByUser            User                       @relation(fields: [updatedByUserId], references: [id], onDelete: Cascade)
  cocktailCalculationItems CocktailCalculationItems[]
}

model CocktailStatisticItem {
  id             String         @id @default(cuid())
  cocktailId     String
  cocktail       CocktailRecipe @relation(fields: [cocktailId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  workspaceId    String
  workspace      Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  date           DateTime
  cocktailCardId String?
  cocktailCard   CocktailCard?  @relation(fields: [cocktailCardId], references: [id], onDelete: SetNull)
  actionSource   String?
}

model CocktailCalculationItems {
  plannedAmount Int
  customPrice   Float?
  cocktailId    String
  cocktail      CocktailRecipe      @relation(fields: [cocktailId], references: [id], onDelete: Cascade)
  calculationId String
  calculation   CocktailCalculation @relation(fields: [calculationId], references: [id], onDelete: Cascade)

  @@id([calculationId, cocktailId])
}
