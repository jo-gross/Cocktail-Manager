generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "postgresql://postgres:postgres@postgres:5432/cocktail_recipe"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())

  sessionToken String @unique @map("session_token")

  userId String @map("user_id")

  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())

  name String?

  email String? @unique

  emailVerified DateTime?

  image String?

  accounts Account[]

  sessions Session[]

  workspaces          WorkspaceUser[]
  settings            UserSetting[]
  CocktailCalculation CocktailCalculation[]
}

enum Setting {
  showImage
  showImageSide
  showTags
  lessItems
  theme
}

model UserSetting {
  userId String

  setting Setting

  value String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, setting])
}

model VerificationToken {
  id Int @id @default(autoincrement())

  identifier String

  token String @unique

  expires DateTime

  @@unique([identifier, token])
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  USER
}

model WorkspaceUser {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String // relation scalar field (used in the `@relation` attribute above)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String // relation scalar field (used in the `@relation` attribute above)
  role        Role

  @@id([workspaceId, userId])
}

model Workspace {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  image               String?
  users               WorkspaceUser[]
  Glass               Glass[]
  Garnish             Garnish[]
  CocktailRecipe      CocktailRecipe[]
  Ingredient          Ingredient[]
  CocktailCard        CocktailCard[]
  CocktailCalculation CocktailCalculation[]
}

model Glass {
  id             String           @id @default(cuid())
  name           String
  volume         Float?
  image          String?
  deposit        Float
  CocktailRecipe CocktailRecipe[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model Garnish {
  id                      String                  @id @default(cuid())
  name                    String
  description             String?
  price                   Float?
  image                   String?
  CocktailRecipeGarnishes CocktailRecipeGarnish[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model CocktailRecipe {
  id                    String                  @id @default(cuid())
  name                  String
  description           String?
  tags                  String[]
  image                 String?
  price                 Float?
  glassWithIce          String
  glassId               String?
  glass                 Glass?                  @relation(fields: [glassId], references: [id])
  garnishes             CocktailRecipeGarnish[]
  steps                 CocktailRecipeStep[]
  CocktailCardGroupItem CocktailCardGroupItem[]

  workspace                Workspace                  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId              String
  CocktailCalculationItems CocktailCalculationItems[]
}

model CocktailRecipeGarnish {
  cocktailRecipeId String
  cocktailRecipe   CocktailRecipe @relation(fields: [cocktailRecipeId], references: [id])
  garnishId        String
  garnish          Garnish        @relation(fields: [garnishId], references: [id])

  description   String?
  garnishNumber Int
  optional      Boolean? @default(false)

  @@id([garnishId, cocktailRecipeId])
}

model CocktailRecipeStep {
  id         String @id @default(cuid())
  stepNumber Int

  mixing Boolean

  tool String

  ingredients CocktailRecipeIngredient[]

  cocktailRecipe   CocktailRecipe @relation(fields: [cocktailRecipeId], references: [id])
  cocktailRecipeId String
}

model CocktailRecipeIngredient {
  id               String      @id @default(cuid())
  ingredientNumber Int
  amount           Float?
  unit             String?
  ingredientId     String?
  ingredient       Ingredient? @relation(fields: [ingredientId], references: [id])

  cocktailRecipeStep   CocktailRecipeStep @relation(fields: [cocktailRecipeStepId], references: [id])
  cocktailRecipeStepId String
}

model Ingredient {
  id                       String                     @id @default(cuid())
  name                     String
  shortName                String?
  price                    Float?
  volume                   Float?
  unit                     String?
  link                     String?
  image                    String?
  tags                     String[]
  CocktailRecipeIngredient CocktailRecipeIngredient[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model CocktailCard {
  id     String              @id @default(cuid())
  name   String
  date   DateTime?
  groups CocktailCardGroup[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

model CocktailCardGroup {
  id             String                  @id @default(cuid())
  groupNumber    Int                     @default(autoincrement())
  name           String
  cocktailCardId String
  groupPrice     Float?
  cocktailCard   CocktailCard            @relation(fields: [cocktailCardId], references: [id])
  items          CocktailCardGroupItem[]
}

model CocktailCardGroupItem {
  itemNumber          Int               @default(autoincrement())
  cocktailCardGroupId String
  cocktailCardGroup   CocktailCardGroup @relation(fields: [cocktailCardGroupId], references: [id])
  cocktailId          String
  cocktail            CocktailRecipe    @relation(fields: [cocktailId], references: [id])
  specialPrice        Float?

  @@id([cocktailCardGroupId, cocktailId])
}

model CocktailCalculation {
  id   String @id @default(cuid())
  name String

  workspaceId              String
  workspace                Workspace                  @relation(fields: [workspaceId], references: [id])
  updatedByUserId          String
  updatedByUser            User                       @relation(fields: [updatedByUserId], references: [id])
  cocktailCalculationItems CocktailCalculationItems[]
}

model CocktailCalculationItems {
  plannedAmount Int
  customPrice   Float?
  cocktailId    String
  cocktail      CocktailRecipe      @relation(fields: [cocktailId], references: [id], onDelete: Cascade)
  calculationId String
  calculation   CocktailCalculation @relation(fields: [calculationId], references: [id], onDelete: Cascade)

  @@id([calculationId, cocktailId])
}
